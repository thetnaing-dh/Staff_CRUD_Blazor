@page "/staff/delete"
@using Microsoft.EntityFrameworkCore
@using Staff_MS_Blazor.Models
@inject IDbContextFactory<Staff_MS_Blazor.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h2>Confirm to Delete Staff</h2>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Staff</h2>
    <hr />
    @if (staff is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@staff.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Birthday</dt>
            <dd class="col-sm-10">@staff.Birthday</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@staff.Phone</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@staff.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@staff.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Position</dt>
            <dd class="col-sm-10">@staff.Position</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Department</dt>
            <dd class="col-sm-10">@staff.Department</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Salary</dt>
            <dd class="col-sm-10">@staff.Salary</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HireDate</dt>
            <dd class="col-sm-10">@staff.HireDate</dd>
        </dl>
        <EditForm method="post" Model="staff" OnValidSubmit="DeleteStaff" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(staff is null)">Delete</button> 
            <a class="btn btn-secondary mx-2" href="/staff">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Staff? staff;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        staff = await context.Staff.FirstOrDefaultAsync(m => m.Id == Id);

        if (staff is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStaff()
    {
        using var context = DbFactory.CreateDbContext();
        context.Staff.Remove(staff!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/staff");
    }
}
